My_blog ROR app creation procedure

1. rails new rails-blog-app --database=postgresql 
                  OR 
rails new rails-blog-app --skip-git --database=postgresql -T #it will not initialize git and will not generate test files
2. git init
3. in `database.yml`
development:
  <<: *default
  database: ror_blog_app_development
  host: localhost
  username: dilsh
  password: dilsher

test:
  <<: *default
  database: ror_blog_app_test
  host: localhost
  username: dilsh
  password: dilsher

4. rails db:create
5. rails g migration create_users name:string photo:string bio:string posts_counter:integer
6. rails g migration create_comments author_id:integer post_id:integer text:text
7. rails g migration create_posts author_id:integer title:string text:text comments_counter:integer likes_counter:integer
8. rails g migration create_likes author_id:integer post_id:integer
9. foreign keys added manually. Can be added by rails command also.
10. indexes added manually. Can be added by rails command also.
11. rails db:migrate
12. models(comment.rb, like.rb, post.rb & user.rb) created. models follows namming convention and they must be singular
  a: comment.rb
    class Comment < ApplicationRecord
      belongs_to :post, class_name: 'Post' #it says Comment belongs_to post & post's class is Post
      belongs_to :author, class_name: 'User' #it says Comment belongs_to author & author's class is User

      after_create :update_comments_counter #it instructs the Comment class to run update_comments_counter.

      def update_comments_counter
        post.update(comments_counter: post.comments.count) #it says update comments_counter for the specific post by applying count(built-in) method on comments on a specific post.
      end
    end
  b:  like.rb  
    class Like < ApplicationRecord
      belongs_to :author, class_name: 'User' #it says Like belongs_to author & author's class is User.
      belongs_to :post, class_name: 'Post' #it says Like belongs_to post & post's class is Post.

      after_create :update_likes_counter #it instructs the Like class to run update_likes_counter on creating like.

      def update_likes_counter
        post.update(likes_counter: post.likes.count)
      end
    end
  c:  user.rb
    class User < ApplicationRecord
      has_many :posts, foreign_key: 'author_id'
      has_many :comments, foreign_key: 'author_id'
      has_many :likes, foreign_key: 'author_id'

      def recent_posts(limit = 3)
        posts.order(created_at: :desc).limit(limit)
      end
    end
  d: post.rb
    class Post < ApplicationRecord
      has_many :comments
      has_many :likes
      belongs_to :author, class_name: 'User', foreign_key: 'author_id'
      
      after_create :update_posts_counter

      def update_posts_counter
        author.increment!(:posts_counter, amount = 1)
      end

      def recent_comment(limit = 5)
        comments.order(created_at: :desc).limit(limit)
      end
    end
13. add validations to models
  a: user.rb
    i)  validates :name, presence: true #it makes sure name is not empty
   ii)  validates :posts_counter, numaricality: {only_integer: true, greater_than_or_equal_to: 0} #it makes sure posts_counter is numerical & greaterORequal to 0
  b: post.rb
    i)  validates :title, presence: true, length: { maximum: 250 } #it makes sure name is not empty and length is not greater than 250 charectors
   ii)  validates :comments_counter, numaricality: { only_integer: true, greater_than_or_equal_to: 0 }  #it makes sure comments_counter is numerical & greaterORequal to 0
  iii)  validates :likes_counter, numaricality: { only_integer: true, greater_than_or_equal_to: 0 } #it makes sure likes_counter is numerical & greaterORequal to 0
14. Let's define test now
  a:  add the following in Gemfile:
        gem 'rspec-rails'
      between the following lines:
        group :development, :test do
          # See https://guides.rubyonrails.org/debugging_rails_applications.html#debugging-with-the-debug-gem
          gem 'debug', platforms: %i[mri mingw x64_mingw]
        end
  b:  run the following command in console:
        rails generate rspec:install
      it will create the following files:
        spec/rails_helper.rb
        spec/spec_helper.rb
        .rspec
  c:  Now lets create tests:
        create following files:
          user_spec.rb in this file validations and methods are tested to give same output every time.
          post_spec.rb in this file validations and methods are tested to give same output every time.
          like_spec.rb in this file validations and methods are tested to give same output every time.
          comment_spec.rb in this file validations and methods are tested to give same output every time.
